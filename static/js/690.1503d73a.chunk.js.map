{"version":3,"file":"static/js/690.1503d73a.chunk.js","mappings":"2PAGaA,GAAgBC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAYE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0JACnB,SAACC,GAAK,OAAKA,EAAMC,MAAMC,MAAMC,OAAO,IAS7CC,EAAiBR,EAAAA,GAAAA,IAAUS,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,oEAM3BO,GAAQV,EAAAA,EAAAA,IAAOW,EAAAA,GAAPX,CAAaY,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,kDAKrBU,EAAab,EAAAA,GAAAA,OAAac,IAAAA,GAAAX,EAAAA,EAAAA,GAAA,uXAS5B,SAACC,GAAK,OAAKA,EAAMC,MAAMC,MAAMS,cAAc,IAChC,SAACX,GAAK,OAAKA,EAAMC,MAAMC,MAAMU,KAAK,IAQhC,SAACZ,GAAK,OAAKA,EAAMC,MAAMC,MAAMW,WAAW,G,6IC9B1DC,EAAiBC,EAAAA,KAAaC,MAAM,CACxCC,WAAYF,EAAAA,KAAaG,SAAS,YAClCC,iBAAkBJ,EAAAA,KAAaG,SAAS,cAG7BrB,EAAO,WAClB,IAAMuB,GAAWC,EAAAA,EAAAA,MAEXC,GAAWC,EAAAA,EAAAA,cACf,SAACC,EAAMC,GAAqB,IAAjBC,EAASD,EAATC,UACTN,GAASO,EAAAA,EAAAA,GAAMH,IACfE,GACF,GACA,CAACN,IAGH,OACEQ,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLC,cAAe,CACbb,WAAY,GACZE,iBAAkB,IAEpBY,iBAAkBjB,EAClBQ,SAAUA,EAASU,SAElB,SAAAC,GAAA,IAAGC,EAAMD,EAANC,OAAQC,EAAOF,EAAPE,QAAO,OACjBC,EAAAA,EAAAA,MAACzC,EAAAA,GAAa,CAAAqC,SAAA,EACZI,EAAAA,EAAAA,MAAChC,EAAAA,GAAc,CAAA4B,SAAA,EACbJ,EAAAA,EAAAA,KAAA,SAAOS,QAAQ,aAAYL,SAAC,QAC5BJ,EAAAA,EAAAA,KAACtB,EAAAA,GAAK,CACJgC,GAAG,aACHC,KAAK,aACLC,YAAY,qBAEbN,EAAOjB,YAAckB,EAAQlB,YAC5BW,EAAAA,EAAAA,KAAA,OAAAI,SAAME,EAAOjB,aACX,SAENmB,EAAAA,EAAAA,MAAChC,EAAAA,GAAc,CAAA4B,SAAA,EACbJ,EAAAA,EAAAA,KAAA,SAAOS,QAAQ,mBAAkBL,SAAC,WAClCJ,EAAAA,EAAAA,KAACtB,EAAAA,GAAK,CACJgC,GAAG,mBACHC,KAAK,mBACLC,YAAY,2BAEbN,EAAOf,kBAAoBgB,EAAQhB,kBAClCS,EAAAA,EAAAA,KAAA,OAAAI,SAAME,EAAOf,mBACX,SAGNS,EAAAA,EAAAA,KAACnB,EAAAA,GAAU,CAACgC,KAAK,SAAQT,SAAC,YACZ,GAIxB,E,SCtDA,EAVa,WACX,OACEJ,EAAAA,EAAAA,KAAA,QAAAI,UACEJ,EAAAA,EAAAA,KAACc,EAAAA,EAAS,CAACC,KAAK,OAAMX,UACpBJ,EAAAA,EAAAA,KAAC/B,EAAI,OAIb,C","sources":["components/Form/Form.styled.js","components/Form/Form.jsx","pages/Home.js"],"sourcesContent":["import { Field, Form } from \"formik\";\nimport styled from \"styled-components\";\n\nexport const FormContainer = styled(Form)`\n  background-color: ${(props) => props.theme.color.bgColor};\n  width: 350px;\n  padding: 40px;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  border-radius: 10px;\n`;\n\nexport const FieldContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nexport const Input = styled(Field)`\n  border-radius: 5px;\n  padding: 5px;\n`;\n\nexport const ButtonForm = styled.button`\n  display: block;\n  height: 40px;\n\n  font-family: inherit;\n  font-weight: 500;\n  font-size: 18px;\n  line-height: 1.2;\n\n  color: ${(props) => props.theme.color.secondaryColor};\n  background-color: ${(props) => props.theme.color.bgBtn};\n  box-shadow: 0px 3.43693px 3.43693px rgba(0, 0, 0, 0.25);\n  border-radius: 10.3108px;\n\n  transition: background-color 250ms linear;\n\n  &:hover,\n  &:focus {\n    background-color: ${(props) => props.theme.color.accentColor};\n  }\n`;\n","import { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useCallback } from \"react\";\nimport {\n  ButtonForm,\n  FieldContainer,\n  FormContainer,\n  Input,\n} from \"./Form.styled\";\nimport { useDispatch } from \"react-redux\";\nimport { logIn } from \"../../redux/auth/operations\";\n\nconst validateSchema = Yup.object().shape({\n  idInstance: Yup.string().required(\"Required\"),\n  apiTokenInstance: Yup.string().required(\"Required\"),\n});\n\nexport const Form = () => {\n  const dispatch = useDispatch();\n\n  const onSubmit = useCallback(\n    (values, { resetForm }) => {\n      dispatch(logIn(values));\n      resetForm();\n    },\n    [dispatch]\n  );\n\n  return (\n    <Formik\n      initialValues={{\n        idInstance: \"\",\n        apiTokenInstance: \"\",\n      }}\n      validationSchema={validateSchema}\n      onSubmit={onSubmit}\n    >\n      {({ errors, touched }) => (\n        <FormContainer>\n          <FieldContainer>\n            <label htmlFor=\"idInstance\">Id</label>\n            <Input\n              id=\"idInstance\"\n              name=\"idInstance\"\n              placeholder=\"Enter idInstance\"\n            />\n            {errors.idInstance && touched.idInstance ? (\n              <div>{errors.idInstance}</div>\n            ) : null}\n          </FieldContainer>\n          <FieldContainer>\n            <label htmlFor=\"apiTokenInstance\">Token</label>\n            <Input\n              id=\"apiTokenInstance\"\n              name=\"apiTokenInstance\"\n              placeholder=\"Enter apiTokenInstance\"\n            />\n            {errors.apiTokenInstance && touched.apiTokenInstance ? (\n              <div>{errors.apiTokenInstance}</div>\n            ) : null}\n          </FieldContainer>\n\n          <ButtonForm type=\"submit\">Login</ButtonForm>\n        </FormContainer>\n      )}\n    </Formik>\n  );\n};\n","import { Form } from \"../components/Form/Form\";\nimport { Container } from \"./Home.styled\";\n\nconst Home = () => {\n  return (\n    <main>\n      <Container home=\"home\">\n        <Form />\n      </Container>\n    </main>\n  );\n};\n\nexport default Home;\n"],"names":["FormContainer","styled","Form","_templateObject","_taggedTemplateLiteral","props","theme","color","bgColor","FieldContainer","_templateObject2","Input","Field","_templateObject3","ButtonForm","_templateObject4","secondaryColor","bgBtn","accentColor","validateSchema","Yup","shape","idInstance","required","apiTokenInstance","dispatch","useDispatch","onSubmit","useCallback","values","_ref","resetForm","logIn","_jsx","Formik","initialValues","validationSchema","children","_ref2","errors","touched","_jsxs","htmlFor","id","name","placeholder","type","Container","home"],"sourceRoot":""}