{"version":3,"file":"static/js/986.6f7a861c.chunk.js","mappings":"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","sources":["components/Form/Form.styled.js","components/FormNumber/FormNumber.js","components/Modal/Modal.styled.js","components/Modal/Modal.js","components/FormTextMessage/FormTextMessage.js","pages/Chats.js"],"sourcesContent":["import { Field, Form } from \"formik\";\nimport styled from \"styled-components\";\n\nexport const FormContainer = styled(Form)`\n  width: 350px;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n`;\n\nexport const FieldContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nexport const Input = styled(Field)`\n  border-radius: 5px;\n  padding: 5px;\n`;\n\nexport const ButtonForm = styled.button`\n  display: block;\n  height: 40px;\n\n  font-family: inherit;\n  font-weight: 500;\n  font-size: 18px;\n  line-height: 1.2;\n\n  color: ${(props) => props.theme.color.secondaryColor};\n  background-color: ${(props) => props.theme.color.bgBtn};\n  box-shadow: 0px 3.43693px 3.43693px rgba(0, 0, 0, 0.25);\n  border-radius: 10.3108px;\n\n  transition: background-color 250ms linear;\n\n  &:hover,\n  &:focus {\n    background-color: ${(props) => props.theme.color.accentColor};\n  }\n`;\n","import { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport {\n  ButtonForm,\n  FieldContainer,\n  FormContainer,\n  Input,\n} from \"../Form/Form.styled\";\n\nconst validateSchema = Yup.object().shape({\n  phone: Yup.number().required(\"Required\"),\n});\n\nexport const FormNumber = ({ onSubmit }) => {\n  return (\n    <Formik\n      initialValues={{\n        phone: \"\",\n      }}\n      validationSchema={validateSchema}\n      onSubmit={onSubmit}\n    >\n      {({ errors, touched }) => (\n        <FormContainer>\n          <FieldContainer>\n            <label htmlFor=\"phone\">Telephone number</label>\n            <Input id=\"phone\" name=\"phone\" placeholder=\"Enter phone\" />\n            {errors.phone && touched.phone ? <div>{errors.phone}</div> : null}\n          </FieldContainer>\n\n          <ButtonForm type=\"submit\">Submit</ButtonForm>\n        </FormContainer>\n      )}\n    </Formik>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const ModalContainer = styled.div`\n  max-width: calc(100vw - 48px);\n  max-height: calc(100vh - 24px);\n`;\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1200;\n`;\n","import { FormNumber } from \"../FormNumber/FormNumber\";\nimport { Overlay, ModalContainer } from \"./Modal.styled\";\nimport { useEffect } from \"react\";\n\nexport const Modal = ({ onModalClose, onSubmit }) => {\n  useEffect(() => {\n    window.addEventListener(\"keydown\", onCloseEsc);\n\n    return () => {\n      window.removeEventListener(\"keydown\", onCloseEsc);\n    };\n  });\n\n  const onCloseEsc = (e) => {\n    if (e.code === \"Escape\") {\n      onModalClose();\n    }\n  };\n\n  const onCloseBackdrop = (e) => {\n    if (e.currentTarget === e.target) {\n      onModalClose();\n    }\n  };\n\n  return (\n    <Overlay onClick={onCloseBackdrop}>\n      <ModalContainer>\n        <FormNumber onSubmit={onSubmit} />\n      </ModalContainer>\n    </Overlay>\n  );\n};\n","import { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport {\n  ButtonForm,\n  FieldContainer,\n  FormContainer,\n  Input,\n} from \"../Form/Form.styled\";\n\nconst validateSchema = Yup.object().shape({\n  text: Yup.string().required(\"Required\"),\n});\n\nexport const ForTextMessage = ({ onSubmitMessage }) => {\n  return (\n    <Formik\n      initialValues={{\n        text: \"\",\n      }}\n      validationSchema={validateSchema}\n      onSubmit={onSubmitMessage}\n    >\n      {({ errors, touched }) => (\n        <FormContainer>\n          <FieldContainer>\n            <Input id=\"text\" name=\"text\" placeholder=\"Enter text message\" />\n            {errors.text && touched.text ? <div>{errors.text}</div> : null}\n          </FieldContainer>\n\n          <ButtonForm type=\"submit\">Submit</ButtonForm>\n        </FormContainer>\n      )}\n    </Formik>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Modal } from \"../components/Modal/Modal\";\nimport { useCallback } from \"react\";\nimport { ForTextMessage } from \"../components/FormTextMessage/FormTextMessage\";\nimport { enterMessage } from \"../api/api\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../redux/auth/selectors\";\n\nconst Chats = () => {\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const { idInstance, apiTokenInstance } = useSelector(selectUser);\n\n  const onSubmit = useCallback((values, { resetForm }) => {\n    setPhoneNumber(values.phone);\n    setIsModalOpen(false);\n    resetForm();\n  }, []);\n\n  const onSubmitMessage = useCallback(\n    async (values, { resetForm }) => {\n      const data = {\n        chatId: `${phoneNumber}@c.us`,\n        message: values.text,\n      };\n      await enterMessage(data, idInstance, apiTokenInstance);\n      resetForm();\n    },\n    [phoneNumber, apiTokenInstance, idInstance]\n  );\n\n  return (\n    <div>\n      <div>\n        <div>\n          <button type=\"button\" onClick={() => setIsModalOpen(true)}>\n            +\n          </button>\n        </div>\n        <ul></ul>\n      </div>\n      <div>\n        {phoneNumber && (\n          <div>\n            <p>{phoneNumber}</p>\n            <div></div>\n            <ForTextMessage onSubmitMessage={onSubmitMessage} />\n          </div>\n        )}\n      </div>\n      {isModalOpen && (\n        <Modal\n          onModalClose={() => {\n            setIsModalOpen(false);\n          }}\n          onSubmit={onSubmit}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Chats;\n"],"names":["FormContainer","styled","Form","_templateObject","_taggedTemplateLiteral","FieldContainer","_templateObject2","Input","Field","_templateObject3","ButtonForm","_templateObject4","props","theme","color","secondaryColor","bgBtn","accentColor","validateSchema","Yup","shape","phone","required","FormNumber","_ref","onSubmit","_jsx","Formik","initialValues","validationSchema","children","_ref2","errors","touched","_jsxs","htmlFor","id","name","placeholder","type","ModalContainer","Overlay","Modal","onModalClose","useEffect","window","addEventListener","onCloseEsc","removeEventListener","e","code","onClick","currentTarget","target","text","ForTextMessage","onSubmitMessage","_useState","useState","_useState2","_slicedToArray","phoneNumber","setPhoneNumber","_useState3","_useState4","isModalOpen","setIsModalOpen","_useSelector","useSelector","selectUser","idInstance","apiTokenInstance","useCallback","values","resetForm","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","chatId","concat","message","enterMessage","stop","_x","_x2","apply","arguments"],"sourceRoot":""}